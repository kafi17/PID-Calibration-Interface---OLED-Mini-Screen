#include <Arduino.h>
#include "U8g2lib.h"

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// 'Layer 1', 120x15px
const unsigned char selection_img [] PROGMEM = {
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x02, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x20, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x1f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x0f
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 256)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	selection_img
};


//pin assignation for buttons
#define NEXT_BUTTON 2 //to move cursor
#define UP_BUTTON 3 //to increase value
#define LOW_BUTTON 4 //to decrease value

int screen_interval = 16, selectBox_ypos = 15, initialSelectBox_ypos = 15, cursorPosition = 0, decimals = 0, integers = 0;
char buffer[10];

float PIDvalues[3] = {1/*KP*/, 0.5/*KI*/, 0.02/*KD*/};
float PIDsteps[3] = {1/*KP*/, 0.1/*KI*/, 0.05/*KD*/};

void setup() {
  pinMode(NEXT_BUTTON, INPUT);
  pinMode(UP_BUTTON, INPUT);
  pinMode(LOW_BUTTON, INPUT);
  u8g2.begin();
  Serial.begin(115200);
  //u8g.setFont(u8g_font_tpssb);
  //u8g.setColorIndex(1);
}

void loop() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_lastapprenticebold_tr);//12PIX print TITTLE
  u8g2.drawStr(54, 1+12, "PID");
  u8g2.drawXBMP(5, selectBox_ypos, 120, 15, selection_img);

  u8g2.setFont(u8g2_font_t0_11b_tf);//8PIX print SUBTITTLES
  u8g2.drawStr(8, 18+8, "Kp");
  u8g2.drawStr(8, 18+screen_interval+8, "Ki");
  u8g2.drawStr(8, 18+screen_interval*2+8, "Kd");

  u8g2.setFont(u8g2_font_t0_11_tf);//8PIX print PID VALUES
  for(int i = 0; i<3; i++){
    integers = (int)PIDvalues[i];
    decimals = abs((int)((PIDvalues[i] - integers) * 100));

    sprintf(buffer, "%d.%02d", integers, decimals);
    //dtostrf(PIDvalues[i], 4, 2, buffer);  // (valor, ancho, decimales, buffer)
    u8g2.drawStr(30, 18+8+screen_interval*i, buffer);
  }
  
  

  //next button to move the cursor or selectbox
  if(digitalRead(NEXT_BUTTON) == HIGH)cursorPosition = (cursorPosition+1)%3;
  selectBox_ypos = initialSelectBox_ypos+(cursorPosition)*screen_interval;
  if(selectBox_ypos > 47) selectBox_ypos = 15;

  //ADD OR SUBSTRACT values in pid
  if(digitalRead(UP_BUTTON) == HIGH)PIDvalues[cursorPosition]+= PIDsteps[cursorPosition];
  if(digitalRead(LOW_BUTTON) == HIGH)PIDvalues[cursorPosition]-= PIDsteps[cursorPosition];

  for(int i = 0; i<3; i++)if(PIDvalues[i] < 0)PIDvalues[i] = 0;



  u8g2.sendBuffer();
  delay(100);
  
}
